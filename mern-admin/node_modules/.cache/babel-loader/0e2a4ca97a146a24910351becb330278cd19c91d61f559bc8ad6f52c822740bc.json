{"ast":null,"code":"module.exports = parse;\n\n/**\r\n * expected argument lengths\r\n * @type {Object}\r\n */\n\nvar length = {\n  a: 7,\n  c: 6,\n  h: 1,\n  l: 2,\n  m: 2,\n  q: 4,\n  s: 4,\n  t: 2,\n  v: 1,\n  z: 0\n};\n\n/**\r\n * segment pattern\r\n * @type {RegExp}\r\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;\n\n/**\r\n * parse an svg path data string. Generates an Array\r\n * of commands where each command is an Array of the\r\n * form `[command, arg1, arg2, ...]`\r\n *\r\n * @param {String} path\r\n * @return {Array}\r\n */\n\nfunction parse(path) {\n  var data = [];\n  path.replace(segment, function (_, command, args) {\n    var type = command.toLowerCase();\n    args = parseValues(args);\n\n    // overloaded moveTo\n    if (type == 'm' && args.length > 2) {\n      data.push([command].concat(args.splice(0, 2)));\n      type = 'l';\n      command = command == 'm' ? 'l' : 'L';\n    }\n    while (true) {\n      if (args.length == length[type]) {\n        args.unshift(command);\n        return data.push(args);\n      }\n      if (args.length < length[type]) throw new Error('malformed path data');\n      data.push([command].concat(args.splice(0, length[type])));\n    }\n  });\n  return data;\n}\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig;\nfunction parseValues(args) {\n  var numbers = args.match(number);\n  return numbers ? numbers.map(Number) : [];\n}","map":{"version":3,"names":["module","exports","parse","length","a","c","h","l","m","q","s","t","v","z","segment","path","data","replace","_","command","args","type","toLowerCase","parseValues","push","concat","splice","unshift","Error","number","numbers","match","map","Number"],"sources":["D:/SLIIT IT/Year 2 semster 2/ITP/Project/Smart TechHub Management System/New-Gen-/mern-admin/node_modules/parse-svg-path/index.js"],"sourcesContent":["\r\nmodule.exports = parse\r\n\r\n/**\r\n * expected argument lengths\r\n * @type {Object}\r\n */\r\n\r\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\r\n\r\n/**\r\n * segment pattern\r\n * @type {RegExp}\r\n */\r\n\r\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\r\n\r\n/**\r\n * parse an svg path data string. Generates an Array\r\n * of commands where each command is an Array of the\r\n * form `[command, arg1, arg2, ...]`\r\n *\r\n * @param {String} path\r\n * @return {Array}\r\n */\r\n\r\nfunction parse(path) {\r\n\tvar data = []\r\n\tpath.replace(segment, function(_, command, args){\r\n\t\tvar type = command.toLowerCase()\r\n\t\targs = parseValues(args)\r\n\r\n\t\t// overloaded moveTo\r\n\t\tif (type == 'm' && args.length > 2) {\r\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\r\n\t\t\ttype = 'l'\r\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\r\n\t\t}\r\n\r\n\t\twhile (true) {\r\n\t\t\tif (args.length == length[type]) {\r\n\t\t\t\targs.unshift(command)\r\n\t\t\t\treturn data.push(args)\r\n\t\t\t}\r\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\r\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\r\n\t\t}\r\n\t})\r\n\treturn data\r\n}\r\n\r\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\r\n\r\nfunction parseValues(args) {\r\n\tvar numbers = args.match(number)\r\n\treturn numbers ? numbers.map(Number) : []\r\n}\r\n"],"mappings":"AACAA,MAAM,CAACC,OAAO,GAAGC,KAAK;;AAEtB;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GAAG;EAACC,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE,CAAC;EAAEC,CAAC,EAAE;AAAC,CAAC;;AAEzE;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GAAG,kCAAkC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASZ,KAAKA,CAACa,IAAI,EAAE;EACpB,IAAIC,IAAI,GAAG,EAAE;EACbD,IAAI,CAACE,OAAO,CAACH,OAAO,EAAE,UAASI,CAAC,EAAEC,OAAO,EAAEC,IAAI,EAAC;IAC/C,IAAIC,IAAI,GAAGF,OAAO,CAACG,WAAW,CAAC,CAAC;IAChCF,IAAI,GAAGG,WAAW,CAACH,IAAI,CAAC;;IAExB;IACA,IAAIC,IAAI,IAAI,GAAG,IAAID,IAAI,CAACjB,MAAM,GAAG,CAAC,EAAE;MACnCa,IAAI,CAACQ,IAAI,CAAC,CAACL,OAAO,CAAC,CAACM,MAAM,CAACL,IAAI,CAACM,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAC9CL,IAAI,GAAG,GAAG;MACVF,OAAO,GAAGA,OAAO,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG;IACrC;IAEA,OAAO,IAAI,EAAE;MACZ,IAAIC,IAAI,CAACjB,MAAM,IAAIA,MAAM,CAACkB,IAAI,CAAC,EAAE;QAChCD,IAAI,CAACO,OAAO,CAACR,OAAO,CAAC;QACrB,OAAOH,IAAI,CAACQ,IAAI,CAACJ,IAAI,CAAC;MACvB;MACA,IAAIA,IAAI,CAACjB,MAAM,GAAGA,MAAM,CAACkB,IAAI,CAAC,EAAE,MAAM,IAAIO,KAAK,CAAC,qBAAqB,CAAC;MACtEZ,IAAI,CAACQ,IAAI,CAAC,CAACL,OAAO,CAAC,CAACM,MAAM,CAACL,IAAI,CAACM,MAAM,CAAC,CAAC,EAAEvB,MAAM,CAACkB,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1D;EACD,CAAC,CAAC;EACF,OAAOL,IAAI;AACZ;AAEA,IAAIa,MAAM,GAAG,mCAAmC;AAEhD,SAASN,WAAWA,CAACH,IAAI,EAAE;EAC1B,IAAIU,OAAO,GAAGV,IAAI,CAACW,KAAK,CAACF,MAAM,CAAC;EAChC,OAAOC,OAAO,GAAGA,OAAO,CAACE,GAAG,CAACC,MAAM,CAAC,GAAG,EAAE;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}