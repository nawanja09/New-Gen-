{"ast":null,"code":"let Prefixer = require('./prefixer');\nlet Browsers = require('./browsers');\nlet utils = require('./utils');\nclass Declaration extends Prefixer {\n  /**\n   * Clone and add prefixes for declaration\n   */\n  add(decl, prefix, prefixes, result) {\n    let prefixed = this.prefixed(decl.prop, prefix);\n    if (this.isAlready(decl, prefixed) || this.otherPrefixes(decl.value, prefix)) {\n      return undefined;\n    }\n    return this.insert(decl, prefix, prefixes, result);\n  }\n\n  /**\n   * Calculate indentation to create visual cascade\n   */\n  calcBefore(prefixes, decl) {\n    let prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    let max = this.maxPrefixed(prefixes, decl);\n    let diff = max - utils.removeNote(prefix).length;\n    let before = decl.raw('before');\n    if (diff > 0) {\n      before += Array(diff).fill(' ').join('');\n    }\n    return before;\n  }\n\n  /**\n   * Always true, because we already get prefixer by property name\n   */\n  check( /* decl */\n  ) {\n    return true;\n  }\n\n  /**\n   * Clone and insert new declaration\n   */\n  insert(decl, prefix, prefixes) {\n    let cloned = this.set(this.clone(decl), prefix);\n    if (!cloned) return undefined;\n    let already = decl.parent.some(i => i.prop === cloned.prop && i.value === cloned.value);\n    if (already) {\n      return undefined;\n    }\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix);\n    }\n    return decl.parent.insertBefore(decl, cloned);\n  }\n\n  /**\n   * Did this declaration has this prefix above\n   */\n  isAlready(decl, prefixed) {\n    let already = this.all.group(decl).up(i => i.prop === prefixed);\n    if (!already) {\n      already = this.all.group(decl).down(i => i.prop === prefixed);\n    }\n    return already;\n  }\n\n  /**\n   * Return maximum length of possible prefixed property\n   */\n  maxPrefixed(prefixes, decl) {\n    if (decl._autoprefixerMax) {\n      return decl._autoprefixerMax;\n    }\n    let max = 0;\n    for (let prefix of prefixes) {\n      prefix = utils.removeNote(prefix);\n      if (prefix.length > max) {\n        max = prefix.length;\n      }\n    }\n    decl._autoprefixerMax = max;\n    return decl._autoprefixerMax;\n  }\n\n  /**\n   * Should we use visual cascade for prefixes\n   */\n  needCascade(decl) {\n    if (!decl._autoprefixerCascade) {\n      decl._autoprefixerCascade = this.all.options.cascade !== false && decl.raw('before').includes('\\n');\n    }\n    return decl._autoprefixerCascade;\n  }\n\n  /**\n   * Return unprefixed version of property\n   */\n  normalize(prop) {\n    return prop;\n  }\n\n  /**\n   * Return list of prefixed properties to clean old prefixes\n   */\n  old(prop, prefix) {\n    return [this.prefixed(prop, prefix)];\n  }\n\n  /**\n   * Check `value`, that it contain other prefixes, rather than `prefix`\n   */\n  otherPrefixes(value, prefix) {\n    for (let other of Browsers.prefixes()) {\n      if (other === prefix) {\n        continue;\n      }\n      if (value.includes(other)) {\n        return value.replace(/var\\([^)]+\\)/, '').includes(other);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Return prefixed version of property\n   */\n  prefixed(prop, prefix) {\n    return prefix + prop;\n  }\n\n  /**\n   * Add spaces for visual cascade\n   */\n  process(decl, result) {\n    if (!this.needCascade(decl)) {\n      super.process(decl, result);\n      return;\n    }\n    let prefixes = super.process(decl, result);\n    if (!prefixes || !prefixes.length) {\n      return;\n    }\n    this.restoreBefore(decl);\n    decl.raws.before = this.calcBefore(prefixes, decl);\n  }\n\n  /**\n   * Remove visual cascade\n   */\n  restoreBefore(decl) {\n    let lines = decl.raw('before').split('\\n');\n    let min = lines[lines.length - 1];\n    this.all.group(decl).up(prefixed => {\n      let array = prefixed.raw('before').split('\\n');\n      let last = array[array.length - 1];\n      if (last.length < min.length) {\n        min = last;\n      }\n    });\n    lines[lines.length - 1] = min;\n    decl.raws.before = lines.join('\\n');\n  }\n\n  /**\n   * Set prefix to declaration\n   */\n  set(decl, prefix) {\n    decl.prop = this.prefixed(decl.prop, prefix);\n    return decl;\n  }\n}\nmodule.exports = Declaration;","map":{"version":3,"names":["Prefixer","require","Browsers","utils","Declaration","add","decl","prefix","prefixes","result","prefixed","prop","isAlready","otherPrefixes","value","undefined","insert","calcBefore","arguments","length","max","maxPrefixed","diff","removeNote","before","raw","Array","fill","join","check","cloned","set","clone","already","parent","some","i","needCascade","raws","insertBefore","all","group","up","down","_autoprefixerMax","_autoprefixerCascade","options","cascade","includes","normalize","old","other","replace","process","restoreBefore","lines","split","min","array","last","module","exports"],"sources":["C:/Users/USER/Desktop/New folder (2)/mern-admin/node_modules/autoprefixer/lib/declaration.js"],"sourcesContent":["let Prefixer = require('./prefixer')\nlet Browsers = require('./browsers')\nlet utils = require('./utils')\n\nclass Declaration extends Prefixer {\n  /**\n   * Clone and add prefixes for declaration\n   */\n  add(decl, prefix, prefixes, result) {\n    let prefixed = this.prefixed(decl.prop, prefix)\n    if (\n      this.isAlready(decl, prefixed) ||\n      this.otherPrefixes(decl.value, prefix)\n    ) {\n      return undefined\n    }\n    return this.insert(decl, prefix, prefixes, result)\n  }\n\n  /**\n   * Calculate indentation to create visual cascade\n   */\n  calcBefore(prefixes, decl, prefix = '') {\n    let max = this.maxPrefixed(prefixes, decl)\n    let diff = max - utils.removeNote(prefix).length\n\n    let before = decl.raw('before')\n    if (diff > 0) {\n      before += Array(diff).fill(' ').join('')\n    }\n\n    return before\n  }\n\n  /**\n   * Always true, because we already get prefixer by property name\n   */\n  check(/* decl */) {\n    return true\n  }\n\n  /**\n   * Clone and insert new declaration\n   */\n  insert(decl, prefix, prefixes) {\n    let cloned = this.set(this.clone(decl), prefix)\n    if (!cloned) return undefined\n\n    let already = decl.parent.some(\n      i => i.prop === cloned.prop && i.value === cloned.value\n    )\n    if (already) {\n      return undefined\n    }\n\n    if (this.needCascade(decl)) {\n      cloned.raws.before = this.calcBefore(prefixes, decl, prefix)\n    }\n    return decl.parent.insertBefore(decl, cloned)\n  }\n\n  /**\n   * Did this declaration has this prefix above\n   */\n  isAlready(decl, prefixed) {\n    let already = this.all.group(decl).up(i => i.prop === prefixed)\n    if (!already) {\n      already = this.all.group(decl).down(i => i.prop === prefixed)\n    }\n    return already\n  }\n\n  /**\n   * Return maximum length of possible prefixed property\n   */\n  maxPrefixed(prefixes, decl) {\n    if (decl._autoprefixerMax) {\n      return decl._autoprefixerMax\n    }\n\n    let max = 0\n    for (let prefix of prefixes) {\n      prefix = utils.removeNote(prefix)\n      if (prefix.length > max) {\n        max = prefix.length\n      }\n    }\n    decl._autoprefixerMax = max\n\n    return decl._autoprefixerMax\n  }\n\n  /**\n   * Should we use visual cascade for prefixes\n   */\n  needCascade(decl) {\n    if (!decl._autoprefixerCascade) {\n      decl._autoprefixerCascade =\n        this.all.options.cascade !== false && decl.raw('before').includes('\\n')\n    }\n    return decl._autoprefixerCascade\n  }\n\n  /**\n   * Return unprefixed version of property\n   */\n  normalize(prop) {\n    return prop\n  }\n\n  /**\n   * Return list of prefixed properties to clean old prefixes\n   */\n  old(prop, prefix) {\n    return [this.prefixed(prop, prefix)]\n  }\n\n  /**\n   * Check `value`, that it contain other prefixes, rather than `prefix`\n   */\n  otherPrefixes(value, prefix) {\n    for (let other of Browsers.prefixes()) {\n      if (other === prefix) {\n        continue\n      }\n      if (value.includes(other)) {\n        return value.replace(/var\\([^)]+\\)/, '').includes(other)\n      }\n    }\n    return false\n  }\n\n  /**\n   * Return prefixed version of property\n   */\n  prefixed(prop, prefix) {\n    return prefix + prop\n  }\n\n  /**\n   * Add spaces for visual cascade\n   */\n  process(decl, result) {\n    if (!this.needCascade(decl)) {\n      super.process(decl, result)\n      return\n    }\n\n    let prefixes = super.process(decl, result)\n\n    if (!prefixes || !prefixes.length) {\n      return\n    }\n\n    this.restoreBefore(decl)\n    decl.raws.before = this.calcBefore(prefixes, decl)\n  }\n\n  /**\n   * Remove visual cascade\n   */\n  restoreBefore(decl) {\n    let lines = decl.raw('before').split('\\n')\n    let min = lines[lines.length - 1]\n\n    this.all.group(decl).up(prefixed => {\n      let array = prefixed.raw('before').split('\\n')\n      let last = array[array.length - 1]\n      if (last.length < min.length) {\n        min = last\n      }\n    })\n\n    lines[lines.length - 1] = min\n    decl.raws.before = lines.join('\\n')\n  }\n\n  /**\n   * Set prefix to declaration\n   */\n  set(decl, prefix) {\n    decl.prop = this.prefixed(decl.prop, prefix)\n    return decl\n  }\n}\n\nmodule.exports = Declaration\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}