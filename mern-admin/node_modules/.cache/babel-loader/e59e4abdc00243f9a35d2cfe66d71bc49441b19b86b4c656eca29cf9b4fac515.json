{"ast":null,"code":"let browserslist = require('browserslist');\nfunction capitalize(str) {\n  return str.slice(0, 1).toUpperCase() + str.slice(1);\n}\nconst NAMES = {\n  and_chr: 'Chrome for Android',\n  and_ff: 'Firefox for Android',\n  and_qq: 'QQ Browser',\n  and_uc: 'UC for Android',\n  baidu: 'Baidu Browser',\n  ie: 'IE',\n  ie_mob: 'IE Mobile',\n  ios_saf: 'iOS Safari',\n  kaios: 'KaiOS Browser',\n  op_mini: 'Opera Mini',\n  op_mob: 'Opera Mobile',\n  samsung: 'Samsung Internet'\n};\nfunction prefix(name, prefixes, note) {\n  let out = \"  \".concat(name);\n  if (note) out += ' *';\n  out += ': ';\n  out += prefixes.map(i => i.replace(/^-(.*)-$/g, '$1')).join(', ');\n  out += '\\n';\n  return out;\n}\nmodule.exports = function (prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return 'No browsers selected';\n  }\n  let versions = {};\n  for (let browser of prefixes.browsers.selected) {\n    let parts = browser.split(' ');\n    let name = parts[0];\n    let version = parts[1];\n    name = NAMES[name] || capitalize(name);\n    if (versions[name]) {\n      versions[name].push(version);\n    } else {\n      versions[name] = [version];\n    }\n  }\n  let out = 'Browsers:\\n';\n  for (let browser in versions) {\n    let list = versions[browser];\n    list = list.sort((a, b) => parseFloat(b) - parseFloat(a));\n    out += \"  \".concat(browser, \": \").concat(list.join(', '), \"\\n\");\n  }\n  let coverage = browserslist.coverage(prefixes.browsers.selected);\n  let round = Math.round(coverage * 100) / 100.0;\n  out += \"\\nThese browsers account for \".concat(round, \"% of all users globally\\n\");\n  let atrules = [];\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name];\n    if (name[0] === '@' && data.prefixes) {\n      atrules.push(prefix(name, data.prefixes));\n    }\n  }\n  if (atrules.length > 0) {\n    out += \"\\nAt-Rules:\\n\".concat(atrules.sort().join(''));\n  }\n  let selectors = [];\n  for (let selector of prefixes.add.selectors) {\n    if (selector.prefixes) {\n      selectors.push(prefix(selector.name, selector.prefixes));\n    }\n  }\n  if (selectors.length > 0) {\n    out += \"\\nSelectors:\\n\".concat(selectors.sort().join(''));\n  }\n  let values = [];\n  let props = [];\n  let hadGrid = false;\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name];\n    if (name[0] !== '@' && data.prefixes) {\n      let grid = name.indexOf('grid-') === 0;\n      if (grid) hadGrid = true;\n      props.push(prefix(name, data.prefixes, grid));\n    }\n    if (!Array.isArray(data.values)) {\n      continue;\n    }\n    for (let value of data.values) {\n      let grid = value.name.includes('grid');\n      if (grid) hadGrid = true;\n      let string = prefix(value.name, value.prefixes, grid);\n      if (!values.includes(string)) {\n        values.push(string);\n      }\n    }\n  }\n  if (props.length > 0) {\n    out += \"\\nProperties:\\n\".concat(props.sort().join(''));\n  }\n  if (values.length > 0) {\n    out += \"\\nValues:\\n\".concat(values.sort().join(''));\n  }\n  if (hadGrid) {\n    out += '\\n* - Prefixes will be added only on grid: true option.\\n';\n  }\n  if (!atrules.length && !selectors.length && !props.length && !values.length) {\n    out += \"\\nAwesome! Your browsers don't require any vendor prefixes.\" + '\\nNow you can remove Autoprefixer from build steps.';\n  }\n  return out;\n};","map":{"version":3,"names":["browserslist","require","capitalize","str","slice","toUpperCase","NAMES","and_chr","and_ff","and_qq","and_uc","baidu","ie","ie_mob","ios_saf","kaios","op_mini","op_mob","samsung","prefix","name","prefixes","note","out","concat","map","i","replace","join","module","exports","browsers","selected","length","versions","browser","parts","split","version","push","list","sort","a","b","parseFloat","coverage","round","Math","atrules","add","data","selectors","selector","values","props","hadGrid","grid","indexOf","Array","isArray","value","includes","string"],"sources":["C:/Users/USER/Desktop/New folder (2)/mern-admin/node_modules/autoprefixer/lib/info.js"],"sourcesContent":["let browserslist = require('browserslist')\n\nfunction capitalize(str) {\n  return str.slice(0, 1).toUpperCase() + str.slice(1)\n}\n\nconst NAMES = {\n  and_chr: 'Chrome for Android',\n  and_ff: 'Firefox for Android',\n  and_qq: 'QQ Browser',\n  and_uc: 'UC for Android',\n  baidu: 'Baidu Browser',\n  ie: 'IE',\n  ie_mob: 'IE Mobile',\n  ios_saf: 'iOS Safari',\n  kaios: 'KaiOS Browser',\n  op_mini: 'Opera Mini',\n  op_mob: 'Opera Mobile',\n  samsung: 'Samsung Internet'\n}\n\nfunction prefix(name, prefixes, note) {\n  let out = `  ${name}`\n  if (note) out += ' *'\n  out += ': '\n  out += prefixes.map(i => i.replace(/^-(.*)-$/g, '$1')).join(', ')\n  out += '\\n'\n  return out\n}\n\nmodule.exports = function (prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return 'No browsers selected'\n  }\n\n  let versions = {}\n  for (let browser of prefixes.browsers.selected) {\n    let parts = browser.split(' ')\n    let name = parts[0]\n    let version = parts[1]\n\n    name = NAMES[name] || capitalize(name)\n    if (versions[name]) {\n      versions[name].push(version)\n    } else {\n      versions[name] = [version]\n    }\n  }\n\n  let out = 'Browsers:\\n'\n  for (let browser in versions) {\n    let list = versions[browser]\n    list = list.sort((a, b) => parseFloat(b) - parseFloat(a))\n    out += `  ${browser}: ${list.join(', ')}\\n`\n  }\n\n  let coverage = browserslist.coverage(prefixes.browsers.selected)\n  let round = Math.round(coverage * 100) / 100.0\n  out += `\\nThese browsers account for ${round}% of all users globally\\n`\n\n  let atrules = []\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name]\n    if (name[0] === '@' && data.prefixes) {\n      atrules.push(prefix(name, data.prefixes))\n    }\n  }\n  if (atrules.length > 0) {\n    out += `\\nAt-Rules:\\n${atrules.sort().join('')}`\n  }\n\n  let selectors = []\n  for (let selector of prefixes.add.selectors) {\n    if (selector.prefixes) {\n      selectors.push(prefix(selector.name, selector.prefixes))\n    }\n  }\n  if (selectors.length > 0) {\n    out += `\\nSelectors:\\n${selectors.sort().join('')}`\n  }\n\n  let values = []\n  let props = []\n  let hadGrid = false\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name]\n    if (name[0] !== '@' && data.prefixes) {\n      let grid = name.indexOf('grid-') === 0\n      if (grid) hadGrid = true\n      props.push(prefix(name, data.prefixes, grid))\n    }\n\n    if (!Array.isArray(data.values)) {\n      continue\n    }\n    for (let value of data.values) {\n      let grid = value.name.includes('grid')\n      if (grid) hadGrid = true\n      let string = prefix(value.name, value.prefixes, grid)\n      if (!values.includes(string)) {\n        values.push(string)\n      }\n    }\n  }\n\n  if (props.length > 0) {\n    out += `\\nProperties:\\n${props.sort().join('')}`\n  }\n  if (values.length > 0) {\n    out += `\\nValues:\\n${values.sort().join('')}`\n  }\n  if (hadGrid) {\n    out += '\\n* - Prefixes will be added only on grid: true option.\\n'\n  }\n\n  if (!atrules.length && !selectors.length && !props.length && !values.length) {\n    out +=\n      \"\\nAwesome! Your browsers don't require any vendor prefixes.\" +\n      '\\nNow you can remove Autoprefixer from build steps.'\n  }\n\n  return out\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}