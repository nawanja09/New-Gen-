{"ast":null,"code":"import { Base } from './Base.js';\nimport { Number as NumberT } from './Number.js';\nimport * as utils from './utils.js';\nclass StringT extends Base {\n  constructor(length) {\n    let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ascii';\n    super();\n    this.length = length;\n    this.encoding = encoding;\n  }\n  decode(stream, parent) {\n    let length, pos;\n    let {\n      encoding\n    } = this;\n    if (typeof encoding === 'function') {\n      encoding = encoding.call(parent, parent) || 'ascii';\n    }\n    let width = encodingWidth(encoding);\n    if (this.length != null) {\n      length = utils.resolveLength(this.length, stream, parent);\n    } else {\n      let buffer;\n      ({\n        buffer,\n        length,\n        pos\n      } = stream);\n      while (pos < length - width + 1 && (buffer[pos] !== 0x00 || width === 2 && buffer[pos + 1] !== 0x00)) {\n        pos += width;\n      }\n      length = pos - stream.pos;\n    }\n    const string = stream.readString(length, encoding);\n    if (this.length == null && stream.pos < stream.length) {\n      stream.pos += width;\n    }\n    return string;\n  }\n  size(val, parent) {\n    // Use the defined value if no value was given\n    if (val === undefined || val === null) {\n      return utils.resolveLength(this.length, null, parent);\n    }\n    let {\n      encoding\n    } = this;\n    if (typeof encoding === 'function') {\n      encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || 'ascii';\n    }\n    if (encoding === 'utf16be') {\n      encoding = 'utf16le';\n    }\n    let size = byteLength(val, encoding);\n    if (this.length instanceof NumberT) {\n      size += this.length.size();\n    }\n    if (this.length == null) {\n      size += encodingWidth(encoding);\n    }\n    return size;\n  }\n  encode(stream, val, parent) {\n    let {\n      encoding\n    } = this;\n    if (typeof encoding === 'function') {\n      encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || 'ascii';\n    }\n    if (this.length instanceof NumberT) {\n      this.length.encode(stream, byteLength(val, encoding));\n    }\n    stream.writeString(val, encoding);\n    if (this.length == null) {\n      return encodingWidth(encoding) == 2 ? stream.writeUInt16LE(0x0000) : stream.writeUInt8(0x00);\n    }\n  }\n}\nfunction encodingWidth(encoding) {\n  switch (encoding) {\n    case 'ascii':\n    case 'utf8':\n      // utf8 is a byte-based encoding for zero-term string\n      return 1;\n    case 'utf16le':\n    case 'utf16-le':\n    case 'utf16be':\n    case 'utf16-be':\n    case 'ucs2':\n      return 2;\n    default:\n      throw new Error('Unknown encoding ' + encoding);\n  }\n}\nfunction byteLength(string, encoding) {\n  switch (encoding) {\n    case 'ascii':\n      return string.length;\n    case 'utf8':\n      let len = 0;\n      for (let i = 0; i < string.length; i++) {\n        let c = string.charCodeAt(i);\n        if (c >= 0xd800 && c <= 0xdbff && i < string.length - 1) {\n          let c2 = string.charCodeAt(++i);\n          if ((c2 & 0xfc00) === 0xdc00) {\n            c = ((c & 0x3ff) << 10) + (c2 & 0x3ff) + 0x10000;\n          } else {\n            // unmatched surrogate.\n            i--;\n          }\n        }\n        if ((c & 0xffffff80) === 0) {\n          len++;\n        } else if ((c & 0xfffff800) === 0) {\n          len += 2;\n        } else if ((c & 0xffff0000) === 0) {\n          len += 3;\n        } else if ((c & 0xffe00000) === 0) {\n          len += 4;\n        }\n      }\n      return len;\n    case 'utf16le':\n    case 'utf16-le':\n    case 'utf16be':\n    case 'utf16-be':\n    case 'ucs2':\n      return string.length * 2;\n    default:\n      throw new Error('Unknown encoding ' + encoding);\n  }\n}\nexport { StringT as String };","map":{"version":3,"names":["Base","Number","NumberT","utils","StringT","constructor","length","encoding","arguments","undefined","decode","stream","parent","pos","call","width","encodingWidth","resolveLength","buffer","string","readString","size","val","byteLength","encode","writeString","writeUInt16LE","writeUInt8","Error","len","i","c","charCodeAt","c2","String"],"sources":["C:/Users/USER/Desktop/New folder (2)/mern-admin/node_modules/restructure/src/String.js"],"sourcesContent":["import {Base} from './Base.js';\nimport {Number as NumberT} from './Number.js';\nimport * as utils from './utils.js';\n\nclass StringT extends Base {\n  constructor(length, encoding = 'ascii') {\n    super();\n    this.length = length;\n    this.encoding = encoding;\n  }\n\n  decode(stream, parent) {\n    let length, pos;\n\n    let { encoding } = this;\n    if (typeof encoding === 'function') {\n      encoding = encoding.call(parent, parent) || 'ascii';\n    }\n    let width = encodingWidth(encoding);\n\n    if (this.length != null) {\n      length = utils.resolveLength(this.length, stream, parent);\n    } else {\n      let buffer;\n      ({buffer, length, pos} = stream);\n\n      while ((pos < length - width + 1) &&\n        (buffer[pos] !== 0x00 ||\n        (width === 2 && buffer[pos+1] !== 0x00)\n        )) {\n        pos += width;\n      }\n\n      length = pos - stream.pos;\n    }\n\n\n    const string = stream.readString(length, encoding);\n\n    if ((this.length == null) && (stream.pos < stream.length)) {\n      stream.pos+=width;\n    }\n\n    return string;\n  }\n\n  size(val, parent) {\n    // Use the defined value if no value was given\n    if (val === undefined || val === null) {\n      return utils.resolveLength(this.length, null, parent);\n    }\n\n    let { encoding } = this;\n    if (typeof encoding === 'function') {\n      encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || 'ascii';\n    }\n\n    if (encoding === 'utf16be') {\n      encoding = 'utf16le';\n    }\n\n    let size = byteLength(val, encoding);\n    if (this.length instanceof NumberT) {\n      size += this.length.size();\n    }\n\n    if ((this.length == null)) {\n      size += encodingWidth(encoding);\n    }\n\n    return size;\n  }\n\n  encode(stream, val, parent) {\n    let { encoding } = this;\n    if (typeof encoding === 'function') {\n      encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || 'ascii';\n    }\n\n    if (this.length instanceof NumberT) {\n      this.length.encode(stream, byteLength(val, encoding));\n    }\n\n    stream.writeString(val, encoding);\n\n    if ((this.length == null)) {\n      return encodingWidth(encoding) == 2 ?\n        stream.writeUInt16LE(0x0000) :\n        stream.writeUInt8(0x00);\n    }\n  }\n}\n\nfunction encodingWidth(encoding) {\n  switch(encoding) {\n    case 'ascii':\n    case 'utf8': // utf8 is a byte-based encoding for zero-term string\n      return 1;\n    case 'utf16le':\n    case 'utf16-le':\n    case 'utf16be':\n    case 'utf16-be':\n    case 'ucs2':\n      return 2;\n    default:\n      throw new Error('Unknown encoding ' + encoding);\n  }\n}\n\nfunction byteLength(string, encoding) {\n  switch (encoding) {\n    case 'ascii':\n      return string.length;\n    case 'utf8':\n      let len = 0;\n      for (let i = 0; i < string.length; i++) {\n        let c = string.charCodeAt(i);\n\n        if (c >= 0xd800 && c <= 0xdbff && i < string.length - 1) {\n          let c2 = string.charCodeAt(++i);\n          if ((c2 & 0xfc00) === 0xdc00) {\n            c = ((c & 0x3ff) << 10) + (c2 & 0x3ff) + 0x10000;\n          } else {\n            // unmatched surrogate.\n            i--;\n          }\n        }\n\n        if ((c & 0xffffff80) === 0) {\n          len++;\n        } else if ((c & 0xfffff800) === 0) {\n          len += 2;\n        } else if ((c & 0xffff0000) === 0) {\n          len += 3;\n        } else if ((c & 0xffe00000) === 0) {\n          len += 4;\n        }\n      }\n      return len;\n    case 'utf16le':\n    case 'utf16-le':\n    case 'utf16be':\n    case 'utf16-be':\n    case 'ucs2':\n      return string.length * 2;\n    default:\n      throw new Error('Unknown encoding ' + encoding);\n  }\n}\n\nexport {StringT as String};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}