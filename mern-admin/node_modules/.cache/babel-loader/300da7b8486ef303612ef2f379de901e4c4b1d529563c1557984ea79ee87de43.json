{"ast":null,"code":"let {\n  list\n} = require('postcss');\n\n/**\r\n * Throw special error, to tell beniary,\r\n * that this error is from Autoprefixer.\r\n */\nmodule.exports.error = function (text) {\n  let err = new Error(text);\n  err.autoprefixer = true;\n  throw err;\n};\n\n/**\r\n * Return array, that doesn’t contain duplicates.\r\n */\nmodule.exports.uniq = function (array) {\n  return [...new Set(array)];\n};\n\n/**\r\n * Return \"-webkit-\" on \"-webkit- old\"\r\n */\nmodule.exports.removeNote = function (string) {\n  if (!string.includes(' ')) {\n    return string;\n  }\n  return string.split(' ')[0];\n};\n\n/**\r\n * Escape RegExp symbols\r\n */\nmodule.exports.escapeRegexp = function (string) {\n  return string.replace(/[$()*+-.?[\\\\\\]^{|}]/g, '\\\\$&');\n};\n\n/**\r\n * Return regexp to check, that CSS string contain word\r\n */\nmodule.exports.regexp = function (word, escape = true) {\n  if (escape) {\n    word = this.escapeRegexp(word);\n  }\n  return new RegExp(`(^|[\\\\s,(])(${word}($|[\\\\s(,]))`, 'gi');\n};\n\n/**\r\n * Change comma list\r\n */\nmodule.exports.editList = function (value, callback) {\n  let origin = list.comma(value);\n  let changed = callback(origin, []);\n  if (origin === changed) {\n    return value;\n  }\n  let join = value.match(/,\\s*/);\n  join = join ? join[0] : ', ';\n  return changed.join(join);\n};\n\n/**\r\n * Split the selector into parts.\r\n * It returns 3 level deep array because selectors can be comma\r\n * separated (1), space separated (2), and combined (3)\r\n * @param {String} selector selector string\r\n * @return {Array<Array<Array>>} 3 level deep array of split selector\r\n * @see utils.test.js for examples\r\n */\nmodule.exports.splitSelector = function (selector) {\n  return list.comma(selector).map(i => {\n    return list.space(i).map(k => {\n      return k.split(/(?=\\.|#)/g);\n    });\n  });\n};\n\n/**\r\n * Return true if a given value only contains numbers.\r\n * @param {*} value\r\n * @returns {boolean}\r\n */\nmodule.exports.isPureNumber = function (value) {\n  if (typeof value === 'number') {\n    return true;\n  }\n  if (typeof value === 'string') {\n    return /^[0-9]+$/.test(value);\n  }\n  return false;\n};","map":{"version":3,"names":["list","require","module","exports","error","text","err","Error","autoprefixer","uniq","array","Set","removeNote","string","includes","split","escapeRegexp","replace","regexp","word","escape","RegExp","editList","value","callback","origin","comma","changed","join","match","splitSelector","selector","map","i","space","k","isPureNumber","test"],"sources":["D:/SLIIT IT/Year 2 semster 2/ITP/Project/Smart TechHub Management System/New-Gen-/mern-admin/node_modules/autoprefixer/lib/utils.js"],"sourcesContent":["let { list } = require('postcss')\r\n\r\n/**\r\n * Throw special error, to tell beniary,\r\n * that this error is from Autoprefixer.\r\n */\r\nmodule.exports.error = function (text) {\r\n  let err = new Error(text)\r\n  err.autoprefixer = true\r\n  throw err\r\n}\r\n\r\n/**\r\n * Return array, that doesn’t contain duplicates.\r\n */\r\nmodule.exports.uniq = function (array) {\r\n  return [...new Set(array)]\r\n}\r\n\r\n/**\r\n * Return \"-webkit-\" on \"-webkit- old\"\r\n */\r\nmodule.exports.removeNote = function (string) {\r\n  if (!string.includes(' ')) {\r\n    return string\r\n  }\r\n\r\n  return string.split(' ')[0]\r\n}\r\n\r\n/**\r\n * Escape RegExp symbols\r\n */\r\nmodule.exports.escapeRegexp = function (string) {\r\n  return string.replace(/[$()*+-.?[\\\\\\]^{|}]/g, '\\\\$&')\r\n}\r\n\r\n/**\r\n * Return regexp to check, that CSS string contain word\r\n */\r\nmodule.exports.regexp = function (word, escape = true) {\r\n  if (escape) {\r\n    word = this.escapeRegexp(word)\r\n  }\r\n  return new RegExp(`(^|[\\\\s,(])(${word}($|[\\\\s(,]))`, 'gi')\r\n}\r\n\r\n/**\r\n * Change comma list\r\n */\r\nmodule.exports.editList = function (value, callback) {\r\n  let origin = list.comma(value)\r\n  let changed = callback(origin, [])\r\n\r\n  if (origin === changed) {\r\n    return value\r\n  }\r\n\r\n  let join = value.match(/,\\s*/)\r\n  join = join ? join[0] : ', '\r\n  return changed.join(join)\r\n}\r\n\r\n/**\r\n * Split the selector into parts.\r\n * It returns 3 level deep array because selectors can be comma\r\n * separated (1), space separated (2), and combined (3)\r\n * @param {String} selector selector string\r\n * @return {Array<Array<Array>>} 3 level deep array of split selector\r\n * @see utils.test.js for examples\r\n */\r\nmodule.exports.splitSelector = function (selector) {\r\n  return list.comma(selector).map(i => {\r\n    return list.space(i).map(k => {\r\n      return k.split(/(?=\\.|#)/g)\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Return true if a given value only contains numbers.\r\n * @param {*} value\r\n * @returns {boolean}\r\n */\r\nmodule.exports.isPureNumber = function (value) {\r\n  if (typeof value === 'number') {\r\n    return true\r\n  }\r\n  if (typeof value === 'string') {\r\n    return /^[0-9]+$/.test(value)\r\n  }\r\n  return false\r\n}\r\n"],"mappings":"AAAA,IAAI;EAAEA;AAAK,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAEjC;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,CAACC,KAAK,GAAG,UAAUC,IAAI,EAAE;EACrC,IAAIC,GAAG,GAAG,IAAIC,KAAK,CAACF,IAAI,CAAC;EACzBC,GAAG,CAACE,YAAY,GAAG,IAAI;EACvB,MAAMF,GAAG;AACX,CAAC;;AAED;AACA;AACA;AACAJ,MAAM,CAACC,OAAO,CAACM,IAAI,GAAG,UAAUC,KAAK,EAAE;EACrC,OAAO,CAAC,GAAG,IAAIC,GAAG,CAACD,KAAK,CAAC,CAAC;AAC5B,CAAC;;AAED;AACA;AACA;AACAR,MAAM,CAACC,OAAO,CAACS,UAAU,GAAG,UAAUC,MAAM,EAAE;EAC5C,IAAI,CAACA,MAAM,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;IACzB,OAAOD,MAAM;EACf;EAEA,OAAOA,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACAb,MAAM,CAACC,OAAO,CAACa,YAAY,GAAG,UAAUH,MAAM,EAAE;EAC9C,OAAOA,MAAM,CAACI,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC;AACvD,CAAC;;AAED;AACA;AACA;AACAf,MAAM,CAACC,OAAO,CAACe,MAAM,GAAG,UAAUC,IAAI,EAAEC,MAAM,GAAG,IAAI,EAAE;EACrD,IAAIA,MAAM,EAAE;IACVD,IAAI,GAAG,IAAI,CAACH,YAAY,CAACG,IAAI,CAAC;EAChC;EACA,OAAO,IAAIE,MAAM,CAAE,eAAcF,IAAK,cAAa,EAAE,IAAI,CAAC;AAC5D,CAAC;;AAED;AACA;AACA;AACAjB,MAAM,CAACC,OAAO,CAACmB,QAAQ,GAAG,UAAUC,KAAK,EAAEC,QAAQ,EAAE;EACnD,IAAIC,MAAM,GAAGzB,IAAI,CAAC0B,KAAK,CAACH,KAAK,CAAC;EAC9B,IAAII,OAAO,GAAGH,QAAQ,CAACC,MAAM,EAAE,EAAE,CAAC;EAElC,IAAIA,MAAM,KAAKE,OAAO,EAAE;IACtB,OAAOJ,KAAK;EACd;EAEA,IAAIK,IAAI,GAAGL,KAAK,CAACM,KAAK,CAAC,MAAM,CAAC;EAC9BD,IAAI,GAAGA,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;EAC5B,OAAOD,OAAO,CAACC,IAAI,CAACA,IAAI,CAAC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1B,MAAM,CAACC,OAAO,CAAC2B,aAAa,GAAG,UAAUC,QAAQ,EAAE;EACjD,OAAO/B,IAAI,CAAC0B,KAAK,CAACK,QAAQ,CAAC,CAACC,GAAG,CAACC,CAAC,IAAI;IACnC,OAAOjC,IAAI,CAACkC,KAAK,CAACD,CAAC,CAAC,CAACD,GAAG,CAACG,CAAC,IAAI;MAC5B,OAAOA,CAAC,CAACpB,KAAK,CAAC,WAAW,CAAC;IAC7B,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAb,MAAM,CAACC,OAAO,CAACiC,YAAY,GAAG,UAAUb,KAAK,EAAE;EAC7C,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAO,IAAI;EACb;EACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAO,UAAU,CAACc,IAAI,CAACd,KAAK,CAAC;EAC/B;EACA,OAAO,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}