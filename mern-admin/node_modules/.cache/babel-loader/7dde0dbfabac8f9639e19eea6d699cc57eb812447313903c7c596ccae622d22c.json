{"ast":null,"code":"let browserslist = require('browserslist');\nlet {\n  agents\n} = require('caniuse-lite/dist/unpacker/agents');\nlet utils = require('./utils');\nclass Browsers {\n  constructor(data, requirements, options, browserslistOpts) {\n    this.data = data;\n    this.options = options || {};\n    this.browserslistOpts = browserslistOpts || {};\n    this.selected = this.parse(requirements);\n  }\n\n  /**\n   * Return all prefixes for default browser data\n   */\n  static prefixes() {\n    if (this.prefixesCache) {\n      return this.prefixesCache;\n    }\n    this.prefixesCache = [];\n    for (let name in agents) {\n      this.prefixesCache.push(\"-\".concat(agents[name].prefix, \"-\"));\n    }\n    this.prefixesCache = utils.uniq(this.prefixesCache).sort((a, b) => b.length - a.length);\n    return this.prefixesCache;\n  }\n\n  /**\n   * Check is value contain any possible prefix\n   */\n  static withPrefix(value) {\n    if (!this.prefixesRegexp) {\n      this.prefixesRegexp = new RegExp(this.prefixes().join('|'));\n    }\n    return this.prefixesRegexp.test(value);\n  }\n\n  /**\n   * Is browser is selected by requirements\n   */\n  isSelected(browser) {\n    return this.selected.includes(browser);\n  }\n\n  /**\n   * Return browsers selected by requirements\n   */\n  parse(requirements) {\n    let opts = {};\n    for (let i in this.browserslistOpts) {\n      opts[i] = this.browserslistOpts[i];\n    }\n    opts.path = this.options.from;\n    return browserslist(requirements, opts);\n  }\n\n  /**\n   * Return prefix for selected browser\n   */\n  prefix(browser) {\n    let [name, version] = browser.split(' ');\n    let data = this.data[name];\n    let prefix = data.prefix_exceptions && data.prefix_exceptions[version];\n    if (!prefix) {\n      prefix = data.prefix;\n    }\n    return \"-\".concat(prefix, \"-\");\n  }\n}\nmodule.exports = Browsers;","map":{"version":3,"names":["browserslist","require","agents","utils","Browsers","constructor","data","requirements","options","browserslistOpts","selected","parse","prefixes","prefixesCache","name","push","concat","prefix","uniq","sort","a","b","length","withPrefix","value","prefixesRegexp","RegExp","join","test","isSelected","browser","includes","opts","i","path","from","version","split","prefix_exceptions","module","exports"],"sources":["C:/Users/USER/Desktop/New folder (2)/mern-admin/node_modules/autoprefixer/lib/browsers.js"],"sourcesContent":["let browserslist = require('browserslist')\nlet { agents } = require('caniuse-lite/dist/unpacker/agents')\n\nlet utils = require('./utils')\n\nclass Browsers {\n  constructor(data, requirements, options, browserslistOpts) {\n    this.data = data\n    this.options = options || {}\n    this.browserslistOpts = browserslistOpts || {}\n    this.selected = this.parse(requirements)\n  }\n\n  /**\n   * Return all prefixes for default browser data\n   */\n  static prefixes() {\n    if (this.prefixesCache) {\n      return this.prefixesCache\n    }\n\n    this.prefixesCache = []\n    for (let name in agents) {\n      this.prefixesCache.push(`-${agents[name].prefix}-`)\n    }\n\n    this.prefixesCache = utils\n      .uniq(this.prefixesCache)\n      .sort((a, b) => b.length - a.length)\n\n    return this.prefixesCache\n  }\n\n  /**\n   * Check is value contain any possible prefix\n   */\n  static withPrefix(value) {\n    if (!this.prefixesRegexp) {\n      this.prefixesRegexp = new RegExp(this.prefixes().join('|'))\n    }\n\n    return this.prefixesRegexp.test(value)\n  }\n\n  /**\n   * Is browser is selected by requirements\n   */\n  isSelected(browser) {\n    return this.selected.includes(browser)\n  }\n\n  /**\n   * Return browsers selected by requirements\n   */\n  parse(requirements) {\n    let opts = {}\n    for (let i in this.browserslistOpts) {\n      opts[i] = this.browserslistOpts[i]\n    }\n    opts.path = this.options.from\n    return browserslist(requirements, opts)\n  }\n\n  /**\n   * Return prefix for selected browser\n   */\n  prefix(browser) {\n    let [name, version] = browser.split(' ')\n    let data = this.data[name]\n\n    let prefix = data.prefix_exceptions && data.prefix_exceptions[version]\n    if (!prefix) {\n      prefix = data.prefix\n    }\n    return `-${prefix}-`\n  }\n}\n\nmodule.exports = Browsers\n"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC1C,IAAI;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,mCAAmC,CAAC;AAE7D,IAAIE,KAAK,GAAGF,OAAO,CAAC,SAAS,CAAC;AAE9B,MAAMG,QAAQ,CAAC;EACbC,WAAWA,CAACC,IAAI,EAAEC,YAAY,EAAEC,OAAO,EAAEC,gBAAgB,EAAE;IACzD,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAC5B,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB,IAAI,CAAC,CAAC;IAC9C,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC;EAC1C;;EAEA;AACF;AACA;EACE,OAAOK,QAAQA,CAAA,EAAG;IAChB,IAAI,IAAI,CAACC,aAAa,EAAE;MACtB,OAAO,IAAI,CAACA,aAAa;IAC3B;IAEA,IAAI,CAACA,aAAa,GAAG,EAAE;IACvB,KAAK,IAAIC,IAAI,IAAIZ,MAAM,EAAE;MACvB,IAAI,CAACW,aAAa,CAACE,IAAI,KAAAC,MAAA,CAAKd,MAAM,CAACY,IAAI,CAAC,CAACG,MAAM,MAAG,CAAC;IACrD;IAEA,IAAI,CAACJ,aAAa,GAAGV,KAAK,CACvBe,IAAI,CAAC,IAAI,CAACL,aAAa,CAAC,CACxBM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,MAAM,GAAGF,CAAC,CAACE,MAAM,CAAC;IAEtC,OAAO,IAAI,CAACT,aAAa;EAC3B;;EAEA;AACF;AACA;EACE,OAAOU,UAAUA,CAACC,KAAK,EAAE;IACvB,IAAI,CAAC,IAAI,CAACC,cAAc,EAAE;MACxB,IAAI,CAACA,cAAc,GAAG,IAAIC,MAAM,CAAC,IAAI,CAACd,QAAQ,CAAC,CAAC,CAACe,IAAI,CAAC,GAAG,CAAC,CAAC;IAC7D;IAEA,OAAO,IAAI,CAACF,cAAc,CAACG,IAAI,CAACJ,KAAK,CAAC;EACxC;;EAEA;AACF;AACA;EACEK,UAAUA,CAACC,OAAO,EAAE;IAClB,OAAO,IAAI,CAACpB,QAAQ,CAACqB,QAAQ,CAACD,OAAO,CAAC;EACxC;;EAEA;AACF;AACA;EACEnB,KAAKA,CAACJ,YAAY,EAAE;IAClB,IAAIyB,IAAI,GAAG,CAAC,CAAC;IACb,KAAK,IAAIC,CAAC,IAAI,IAAI,CAACxB,gBAAgB,EAAE;MACnCuB,IAAI,CAACC,CAAC,CAAC,GAAG,IAAI,CAACxB,gBAAgB,CAACwB,CAAC,CAAC;IACpC;IACAD,IAAI,CAACE,IAAI,GAAG,IAAI,CAAC1B,OAAO,CAAC2B,IAAI;IAC7B,OAAOnC,YAAY,CAACO,YAAY,EAAEyB,IAAI,CAAC;EACzC;;EAEA;AACF;AACA;EACEf,MAAMA,CAACa,OAAO,EAAE;IACd,IAAI,CAAChB,IAAI,EAAEsB,OAAO,CAAC,GAAGN,OAAO,CAACO,KAAK,CAAC,GAAG,CAAC;IACxC,IAAI/B,IAAI,GAAG,IAAI,CAACA,IAAI,CAACQ,IAAI,CAAC;IAE1B,IAAIG,MAAM,GAAGX,IAAI,CAACgC,iBAAiB,IAAIhC,IAAI,CAACgC,iBAAiB,CAACF,OAAO,CAAC;IACtE,IAAI,CAACnB,MAAM,EAAE;MACXA,MAAM,GAAGX,IAAI,CAACW,MAAM;IACtB;IACA,WAAAD,MAAA,CAAWC,MAAM;EACnB;AACF;AAEAsB,MAAM,CAACC,OAAO,GAAGpC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}