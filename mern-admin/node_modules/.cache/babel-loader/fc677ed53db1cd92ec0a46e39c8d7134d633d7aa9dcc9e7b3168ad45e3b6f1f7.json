{"ast":null,"code":"import * as r from \"restructure\";\nimport { readUInt8, readUInt16BE, readUInt16LE, readUInt32BE, readUInt32LE, uint8ArrayToHexString, uint8ArrayToString } from \"./utils.js\";\nconst tags = {\n  ifd: {\n    \"010e\": \"imageDescription\",\n    \"010f\": \"make\",\n    \"011a\": \"xResolution\",\n    \"011b\": \"yResolution\",\n    \"011c\": \"planarConfiguration\",\n    \"012d\": \"transferFunction\",\n    \"013b\": \"artist\",\n    \"013e\": \"whitePoint\",\n    \"013f\": \"primaryChromaticities\",\n    \"0100\": \"imageWidth\",\n    \"0101\": \"imageHeight\",\n    \"0102\": \"bitsPerSample\",\n    \"0103\": \"compression\",\n    \"0106\": \"photometricInterpretation\",\n    \"0110\": \"model\",\n    \"0111\": \"stripOffsets\",\n    \"0112\": \"orientation\",\n    \"0115\": \"samplesPerPixel\",\n    \"0116\": \"rowsPerStrip\",\n    \"0117\": \"stripByteCounts\",\n    \"0128\": \"resolutionUnit\",\n    \"0131\": \"software\",\n    \"0132\": \"dateTime\",\n    \"0201\": \"jpegInterchangeFormat\",\n    \"0202\": \"jpegInterchangeFormatLength\",\n    \"0211\": \"ycbCrCoefficients\",\n    \"0212\": \"ycbCrSubSampling\",\n    \"0213\": \"ycbCrPositioning\",\n    \"0214\": \"referenceBlackWhite\",\n    \"829a\": \"exposureTime\",\n    \"829d\": \"fNumber\",\n    \"920a\": \"focalLength\",\n    \"927c\": \"makerNote\",\n    8298: \"copyright\",\n    8769: \"exifIFDPointer\",\n    8822: \"exposureProgram\",\n    8824: \"spectralSensitivity\",\n    8825: \"gpsInfoIFDPointer\",\n    8827: \"photographicSensitivity\",\n    8828: \"oecf\",\n    8830: \"sensitivityType\",\n    8831: \"standardOutputSensitivity\",\n    8832: \"recommendedExposureIndex\",\n    8833: \"isoSpeed\",\n    8834: \"isoSpeedLatitudeyyy\",\n    8835: \"isoSpeedLatitudezzz\",\n    9000: \"exifVersion\",\n    9003: \"dateTimeOriginal\",\n    9004: \"dateTimeDigitized\",\n    9101: \"componentsConfiguration\",\n    9102: \"compressedBitsPerPixel\",\n    9201: \"shutterSpeedValue\",\n    9202: \"apertureValue\",\n    9203: \"brightnessValue\",\n    9204: \"exposureBiasValue\",\n    9205: \"maxApertureValue\",\n    9206: \"subjectDistance\",\n    9207: \"meteringMode\",\n    9208: \"lightSource\",\n    9209: \"flash\",\n    9214: \"subjectArea\",\n    9286: \"userComment\",\n    9290: \"subSecTime\",\n    9291: \"subSecTimeOriginal\",\n    9292: \"subSecTimeDigitized\",\n    a000: \"flashpixVersion\",\n    a001: \"colorSpace\",\n    a002: \"pixelXDimension\",\n    a003: \"pixelYDimension\",\n    a004: \"relatedSoundFile\",\n    a005: \"interoperabilityIFDPointer\",\n    a20b: \"flashEnergy\",\n    a20c: \"spatialFrequencyResponse\",\n    a20e: \"focalPlaneXResolution\",\n    a20f: \"focalPlaneYResolution\",\n    a40a: \"sharpness\",\n    a40b: \"deviceSettingDescription\",\n    a40c: \"subjectDistanceRange\",\n    a210: \"focalPlaneResolutionUnit\",\n    a214: \"subjectLocation\",\n    a215: \"exposureIndex\",\n    a217: \"sensingMethod\",\n    a300: \"fileSource\",\n    a301: \"sceneType\",\n    a302: \"cfaPattern\",\n    a401: \"customRendered\",\n    a402: \"exposureMode\",\n    a403: \"whiteBalance\",\n    a404: \"digitalZoomRatio\",\n    a405: \"focalLengthIn35mmFilm\",\n    a406: \"sceneCaptureType\",\n    a407: \"gainControl\",\n    a408: \"contrast\",\n    a409: \"saturation\",\n    a420: \"imageUniqueID\",\n    a430: \"cameraOwnerName\",\n    a431: \"bodySerialNumber\",\n    a432: \"lensSpecification\",\n    a433: \"lensMake\",\n    a434: \"lensModel\",\n    a435: \"lensSerialNumber\",\n    a500: \"gamma\"\n  },\n  gps: {\n    \"0000\": \"gpsVersionID\",\n    \"0001\": \"gpsLatitudeRef\",\n    \"0002\": \"gpsLatitude\",\n    \"0003\": \"gpsLongitudeRef\",\n    \"0004\": \"gpsLongitude\",\n    \"0005\": \"gpsAltitudeRef\",\n    \"0006\": \"gpsAltitude\",\n    \"0007\": \"gpsTimeStamp\",\n    \"0008\": \"gpsSatellites\",\n    \"0009\": \"gpsStatus\",\n    \"000a\": \"gpsMeasureMode\",\n    \"000b\": \"gpsDOP\",\n    \"000c\": \"gpsSpeedRef\",\n    \"000d\": \"gpsSpeed\",\n    \"000e\": \"gpsTrackRef\",\n    \"000f\": \"gpsTrack\",\n    \"0010\": \"gpsImgDirectionRef\",\n    \"0011\": \"gpsImgDirection\",\n    \"0012\": \"gpsMapDatum\",\n    \"0013\": \"gpsDestLatitudeRef\",\n    \"0014\": \"gpsDestLatitude\",\n    \"0015\": \"gpsDestLongitudeRef\",\n    \"0016\": \"gpsDestLongitude\",\n    \"0017\": \"gpsDestBearingRef\",\n    \"0018\": \"gpsDestBearing\",\n    \"0019\": \"gpsDestDistanceRef\",\n    \"001a\": \"gpsDestDistance\",\n    \"001b\": \"gpsProcessingMethod\",\n    \"001c\": \"gpsAreaInformation\",\n    \"001d\": \"gpsDateStamp\",\n    \"001e\": \"gpsDifferential\",\n    \"001f\": \"gpsHPositioningError\"\n  }\n};\nclass IDFEntries {\n  constructor(bigEndian) {\n    this.bigEndian = bigEndian;\n    this.bytes = [0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8];\n  }\n  _getTagValue(dataValue, dataFormat) {\n    const uint16 = pos => this.bigEndian ? readUInt16BE(dataValue, pos) : readUInt16LE(dataValue, pos);\n    const uint32 = pos => this.bigEndian ? readUInt32BE(dataValue, pos) : readUInt32LE(dataValue, pos);\n    switch (dataFormat) {\n      case 1:\n        return readUInt8(dataValue, 0);\n      case 2:\n        return dataValue.toString(\"ascii\").replace(/\\0+$/, \"\");\n      case 3:\n        return uint16(0);\n      case 4:\n        return uint32(0);\n      case 5:\n        const tagValue = [];\n        for (var i = 0; i < dataValue.length; i += 8) {\n          tagValue.push(uint32(i) / uint32(i + 4));\n        }\n        return tagValue;\n      case 7:\n        return null;\n      case 10:\n        {\n          return uint32(0) / uint32(4);\n        }\n      default:\n        return \"0x\" + dataValue.toString(\"hex\");\n    }\n  }\n  _decodeIDFEntries(buffer, tags, offset, log = false) {\n    let pos = 2;\n    const entries = {};\n    const uint16 = pos => this.bigEndian ? readUInt16BE(buffer, pos) : readUInt16LE(buffer, pos);\n    const uint32 = pos => this.bigEndian ? readUInt32BE(buffer, pos) : readUInt32LE(buffer, pos);\n    const numberOfEntries = uint16(0);\n    for (let i = 0; i < numberOfEntries; i++) {\n      const tagAddress = buffer.slice(pos, pos + 2);\n      const dataFormat = uint16(pos + 2);\n      const componentsNumber = uint32(pos + 4);\n      const componentsBytes = this.bytes[dataFormat];\n      const dataLength = componentsNumber * componentsBytes;\n      let dataValue = buffer.slice(pos + 8, pos + 12);\n      if (dataLength > 4) {\n        const valueOffset = this.bigEndian ? readUInt32BE(dataValue, 0) : readUInt32LE(dataValue, 0);\n        const dataOffset = valueOffset - offset;\n        dataValue = buffer.slice(dataOffset, dataOffset + dataLength);\n      }\n      const tagValue = this._getTagValue(dataValue, dataFormat);\n      const tagNumber = this.bigEndian ? uint8ArrayToHexString(tagAddress) : uint8ArrayToHexString(tagAddress.reverse());\n      const tagName = tags[tagNumber];\n      entries[tagName] = tagValue;\n      pos += 12;\n    }\n    return entries;\n  }\n  decode(stream, parent) {\n    let buffer = stream.buffer.slice(stream.pos);\n    const offsetToFirstIFD = parent.offsetToFirstIFD;\n    if (offsetToFirstIFD > buffer.length) {\n      stream.pos += parent.parent.length - 16;\n      return {};\n    }\n    const entries = this._decodeIDFEntries(buffer, tags.ifd, offsetToFirstIFD);\n    const {\n      exifIFDPointer,\n      gpsInfoIFDPointer\n    } = entries;\n    if (exifIFDPointer) {\n      buffer = buffer.slice(exifIFDPointer - offsetToFirstIFD);\n      entries.subExif = this._decodeIDFEntries(buffer, tags.ifd, exifIFDPointer);\n    }\n    if (gpsInfoIFDPointer) {\n      const gps = gpsInfoIFDPointer;\n      buffer = buffer.slice(exifIFDPointer ? gps - exifIFDPointer : gps - offsetToFirstIFD);\n      entries.gpsInfo = this._decodeIDFEntries(buffer, tags.gps, gps, true);\n    }\n    stream.pos += parent.parent.length - 16;\n    return entries;\n  }\n}\nconst IFDData = bigEndian => {\n  const uint16 = bigEndian ? r.uint16be : r.uint16le;\n  const uint32 = bigEndian ? r.uint32be : r.uint32le;\n  return new r.Struct({\n    fortyTwo: uint16,\n    offsetToFirstIFD: uint32,\n    entries: new IDFEntries(bigEndian)\n  });\n};\nclass TIFFHeader {\n  decode(stream, parent) {\n    const byteOrder = uint8ArrayToString(stream.buffer.slice(stream.pos, stream.pos + 2));\n    const bigEndian = byteOrder === \"MM\";\n    stream.pos += 2;\n    const data = IFDData(bigEndian).decode(stream, parent);\n    return data.entries;\n  }\n}\nconst EXIFMarker = {\n  name: () => \"EXIF\",\n  length: r.uint16be,\n  identifier: new r.String(6),\n  entries: new TIFFHeader()\n};\nexport default EXIFMarker;","map":{"version":3,"names":["r","readUInt8","readUInt16BE","readUInt16LE","readUInt32BE","readUInt32LE","uint8ArrayToHexString","uint8ArrayToString","tags","ifd","a000","a001","a002","a003","a004","a005","a20b","a20c","a20e","a20f","a40a","a40b","a40c","a210","a214","a215","a217","a300","a301","a302","a401","a402","a403","a404","a405","a406","a407","a408","a409","a420","a430","a431","a432","a433","a434","a435","a500","gps","IDFEntries","constructor","bigEndian","bytes","_getTagValue","dataValue","dataFormat","uint16","pos","uint32","toString","replace","tagValue","i","length","push","_decodeIDFEntries","buffer","offset","log","entries","numberOfEntries","tagAddress","slice","componentsNumber","componentsBytes","dataLength","valueOffset","dataOffset","tagNumber","reverse","tagName","decode","stream","parent","offsetToFirstIFD","exifIFDPointer","gpsInfoIFDPointer","subExif","gpsInfo","IFDData","uint16be","uint16le","uint32be","uint32le","Struct","fortyTwo","TIFFHeader","byteOrder","data","EXIFMarker","name","identifier","String"],"sources":["D:/SLIIT IT/Year 2 semster 2/ITP/Project/Smart TechHub Management System/New-Gen-/mern-admin/node_modules/jay-peg/src/markers/exif.js"],"sourcesContent":["import * as r from \"restructure\";\r\nimport {\r\n  readUInt8,\r\n  readUInt16BE,\r\n  readUInt16LE,\r\n  readUInt32BE,\r\n  readUInt32LE,\r\n  uint8ArrayToHexString,\r\n  uint8ArrayToString,\r\n} from \"./utils.js\";\r\n\r\nconst tags = {\r\n  ifd: {\r\n    \"010e\": \"imageDescription\",\r\n    \"010f\": \"make\",\r\n    \"011a\": \"xResolution\",\r\n    \"011b\": \"yResolution\",\r\n    \"011c\": \"planarConfiguration\",\r\n    \"012d\": \"transferFunction\",\r\n    \"013b\": \"artist\",\r\n    \"013e\": \"whitePoint\",\r\n    \"013f\": \"primaryChromaticities\",\r\n    \"0100\": \"imageWidth\",\r\n    \"0101\": \"imageHeight\",\r\n    \"0102\": \"bitsPerSample\",\r\n    \"0103\": \"compression\",\r\n    \"0106\": \"photometricInterpretation\",\r\n    \"0110\": \"model\",\r\n    \"0111\": \"stripOffsets\",\r\n    \"0112\": \"orientation\",\r\n    \"0115\": \"samplesPerPixel\",\r\n    \"0116\": \"rowsPerStrip\",\r\n    \"0117\": \"stripByteCounts\",\r\n    \"0128\": \"resolutionUnit\",\r\n    \"0131\": \"software\",\r\n    \"0132\": \"dateTime\",\r\n    \"0201\": \"jpegInterchangeFormat\",\r\n    \"0202\": \"jpegInterchangeFormatLength\",\r\n    \"0211\": \"ycbCrCoefficients\",\r\n    \"0212\": \"ycbCrSubSampling\",\r\n    \"0213\": \"ycbCrPositioning\",\r\n    \"0214\": \"referenceBlackWhite\",\r\n    \"829a\": \"exposureTime\",\r\n    \"829d\": \"fNumber\",\r\n    \"920a\": \"focalLength\",\r\n    \"927c\": \"makerNote\",\r\n    8298: \"copyright\",\r\n    8769: \"exifIFDPointer\",\r\n    8822: \"exposureProgram\",\r\n    8824: \"spectralSensitivity\",\r\n    8825: \"gpsInfoIFDPointer\",\r\n    8827: \"photographicSensitivity\",\r\n    8828: \"oecf\",\r\n    8830: \"sensitivityType\",\r\n    8831: \"standardOutputSensitivity\",\r\n    8832: \"recommendedExposureIndex\",\r\n    8833: \"isoSpeed\",\r\n    8834: \"isoSpeedLatitudeyyy\",\r\n    8835: \"isoSpeedLatitudezzz\",\r\n    9000: \"exifVersion\",\r\n    9003: \"dateTimeOriginal\",\r\n    9004: \"dateTimeDigitized\",\r\n    9101: \"componentsConfiguration\",\r\n    9102: \"compressedBitsPerPixel\",\r\n    9201: \"shutterSpeedValue\",\r\n    9202: \"apertureValue\",\r\n    9203: \"brightnessValue\",\r\n    9204: \"exposureBiasValue\",\r\n    9205: \"maxApertureValue\",\r\n    9206: \"subjectDistance\",\r\n    9207: \"meteringMode\",\r\n    9208: \"lightSource\",\r\n    9209: \"flash\",\r\n    9214: \"subjectArea\",\r\n    9286: \"userComment\",\r\n    9290: \"subSecTime\",\r\n    9291: \"subSecTimeOriginal\",\r\n    9292: \"subSecTimeDigitized\",\r\n    a000: \"flashpixVersion\",\r\n    a001: \"colorSpace\",\r\n    a002: \"pixelXDimension\",\r\n    a003: \"pixelYDimension\",\r\n    a004: \"relatedSoundFile\",\r\n    a005: \"interoperabilityIFDPointer\",\r\n    a20b: \"flashEnergy\",\r\n    a20c: \"spatialFrequencyResponse\",\r\n    a20e: \"focalPlaneXResolution\",\r\n    a20f: \"focalPlaneYResolution\",\r\n    a40a: \"sharpness\",\r\n    a40b: \"deviceSettingDescription\",\r\n    a40c: \"subjectDistanceRange\",\r\n    a210: \"focalPlaneResolutionUnit\",\r\n    a214: \"subjectLocation\",\r\n    a215: \"exposureIndex\",\r\n    a217: \"sensingMethod\",\r\n    a300: \"fileSource\",\r\n    a301: \"sceneType\",\r\n    a302: \"cfaPattern\",\r\n    a401: \"customRendered\",\r\n    a402: \"exposureMode\",\r\n    a403: \"whiteBalance\",\r\n    a404: \"digitalZoomRatio\",\r\n    a405: \"focalLengthIn35mmFilm\",\r\n    a406: \"sceneCaptureType\",\r\n    a407: \"gainControl\",\r\n    a408: \"contrast\",\r\n    a409: \"saturation\",\r\n    a420: \"imageUniqueID\",\r\n    a430: \"cameraOwnerName\",\r\n    a431: \"bodySerialNumber\",\r\n    a432: \"lensSpecification\",\r\n    a433: \"lensMake\",\r\n    a434: \"lensModel\",\r\n    a435: \"lensSerialNumber\",\r\n    a500: \"gamma\",\r\n  },\r\n  gps: {\r\n    \"0000\": \"gpsVersionID\",\r\n    \"0001\": \"gpsLatitudeRef\",\r\n    \"0002\": \"gpsLatitude\",\r\n    \"0003\": \"gpsLongitudeRef\",\r\n    \"0004\": \"gpsLongitude\",\r\n    \"0005\": \"gpsAltitudeRef\",\r\n    \"0006\": \"gpsAltitude\",\r\n    \"0007\": \"gpsTimeStamp\",\r\n    \"0008\": \"gpsSatellites\",\r\n    \"0009\": \"gpsStatus\",\r\n    \"000a\": \"gpsMeasureMode\",\r\n    \"000b\": \"gpsDOP\",\r\n    \"000c\": \"gpsSpeedRef\",\r\n    \"000d\": \"gpsSpeed\",\r\n    \"000e\": \"gpsTrackRef\",\r\n    \"000f\": \"gpsTrack\",\r\n    \"0010\": \"gpsImgDirectionRef\",\r\n    \"0011\": \"gpsImgDirection\",\r\n    \"0012\": \"gpsMapDatum\",\r\n    \"0013\": \"gpsDestLatitudeRef\",\r\n    \"0014\": \"gpsDestLatitude\",\r\n    \"0015\": \"gpsDestLongitudeRef\",\r\n    \"0016\": \"gpsDestLongitude\",\r\n    \"0017\": \"gpsDestBearingRef\",\r\n    \"0018\": \"gpsDestBearing\",\r\n    \"0019\": \"gpsDestDistanceRef\",\r\n    \"001a\": \"gpsDestDistance\",\r\n    \"001b\": \"gpsProcessingMethod\",\r\n    \"001c\": \"gpsAreaInformation\",\r\n    \"001d\": \"gpsDateStamp\",\r\n    \"001e\": \"gpsDifferential\",\r\n    \"001f\": \"gpsHPositioningError\",\r\n  },\r\n};\r\n\r\nclass IDFEntries {\r\n  constructor(bigEndian) {\r\n    this.bigEndian = bigEndian;\r\n    this.bytes = [0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8];\r\n  }\r\n\r\n  _getTagValue(dataValue, dataFormat) {\r\n    const uint16 = (pos) =>\r\n      this.bigEndian\r\n        ? readUInt16BE(dataValue, pos)\r\n        : readUInt16LE(dataValue, pos);\r\n\r\n    const uint32 = (pos) =>\r\n      this.bigEndian\r\n        ? readUInt32BE(dataValue, pos)\r\n        : readUInt32LE(dataValue, pos);\r\n\r\n    switch (dataFormat) {\r\n      case 1:\r\n        return readUInt8(dataValue, 0)\r\n      case 2:\r\n        return dataValue.toString(\"ascii\").replace(/\\0+$/, \"\");\r\n      case 3:\r\n        return uint16(0);\r\n      case 4:\r\n        return uint32(0);\r\n      case 5:\r\n        const tagValue = [];\r\n\r\n        for (var i = 0; i < dataValue.length; i += 8) {\r\n          tagValue.push(uint32(i) / uint32(i + 4));\r\n        }\r\n\r\n        return tagValue;\r\n      case 7:\r\n        return null;\r\n      case 10: {\r\n        return uint32(0) / uint32(4);\r\n      }\r\n      default:\r\n        return \"0x\" + dataValue.toString(\"hex\");\r\n    }\r\n  }\r\n\r\n  _decodeIDFEntries(buffer, tags, offset, log = false) {\r\n    let pos = 2;\r\n\r\n    const entries = {};\r\n\r\n    const uint16 = (pos) =>\r\n      this.bigEndian ? readUInt16BE(buffer, pos) : readUInt16LE(buffer, pos);\r\n\r\n    const uint32 = (pos) =>\r\n      this.bigEndian ? readUInt32BE(buffer, pos) : readUInt32LE(buffer, pos);\r\n\r\n    const numberOfEntries = uint16(0);\r\n\r\n    for (let i = 0; i < numberOfEntries; i++) {\r\n      const tagAddress = buffer.slice(pos, pos + 2);\r\n      const dataFormat = uint16(pos + 2);\r\n      const componentsNumber = uint32(pos + 4);\r\n      const componentsBytes = this.bytes[dataFormat];\r\n      const dataLength = componentsNumber * componentsBytes;\r\n\r\n      let dataValue = buffer.slice(pos + 8, pos + 12);\r\n\r\n      if (dataLength > 4) {\r\n        const valueOffset = this.bigEndian\r\n          ? readUInt32BE(dataValue, 0)\r\n          : readUInt32LE(dataValue, 0);\r\n\r\n        const dataOffset = valueOffset - offset;\r\n\r\n        dataValue = buffer.slice(dataOffset, dataOffset + dataLength);\r\n      }\r\n\r\n      const tagValue = this._getTagValue(dataValue, dataFormat);\r\n\r\n      const tagNumber = this.bigEndian\r\n        ? uint8ArrayToHexString(tagAddress)\r\n        : uint8ArrayToHexString(tagAddress.reverse());\r\n\r\n      const tagName = tags[tagNumber];\r\n\r\n      entries[tagName] = tagValue;\r\n\r\n      pos += 12;\r\n    }\r\n\r\n    return entries;\r\n  }\r\n\r\n  decode(stream, parent) {\r\n    let buffer = stream.buffer.slice(stream.pos);\r\n    const offsetToFirstIFD = parent.offsetToFirstIFD;\r\n\r\n    if (offsetToFirstIFD > buffer.length) {\r\n      stream.pos += parent.parent.length - 16;\r\n      return {};\r\n    }\r\n\r\n    const entries = this._decodeIDFEntries(buffer, tags.ifd, offsetToFirstIFD);\r\n    const { exifIFDPointer, gpsInfoIFDPointer } = entries;\r\n\r\n    if (exifIFDPointer) {\r\n      buffer = buffer.slice(exifIFDPointer - offsetToFirstIFD);\r\n      entries.subExif = this._decodeIDFEntries(\r\n        buffer,\r\n        tags.ifd,\r\n        exifIFDPointer,\r\n      );\r\n    }\r\n\r\n    if (gpsInfoIFDPointer) {\r\n      const gps = gpsInfoIFDPointer;\r\n      buffer = buffer.slice(\r\n        exifIFDPointer ? gps - exifIFDPointer : gps - offsetToFirstIFD,\r\n      );\r\n      entries.gpsInfo = this._decodeIDFEntries(buffer, tags.gps, gps, true);\r\n    }\r\n\r\n    stream.pos += parent.parent.length - 16;\r\n\r\n    return entries;\r\n  }\r\n}\r\n\r\nconst IFDData = (bigEndian) => {\r\n  const uint16 = bigEndian ? r.uint16be : r.uint16le;\r\n  const uint32 = bigEndian ? r.uint32be : r.uint32le;\r\n\r\n  return new r.Struct({\r\n    fortyTwo: uint16,\r\n    offsetToFirstIFD: uint32,\r\n    entries: new IDFEntries(bigEndian),\r\n  });\r\n};\r\n\r\nclass TIFFHeader {\r\n  decode(stream, parent) {\r\n    const byteOrder = uint8ArrayToString(\r\n      stream.buffer.slice(stream.pos, stream.pos + 2),\r\n    );\r\n\r\n    const bigEndian = byteOrder === \"MM\";\r\n\r\n    stream.pos += 2;\r\n\r\n    const data = IFDData(bigEndian).decode(stream, parent);\r\n\r\n    return data.entries;\r\n  }\r\n}\r\n\r\nconst EXIFMarker = {\r\n  name: () => \"EXIF\",\r\n  length: r.uint16be,\r\n  identifier: new r.String(6),\r\n  entries: new TIFFHeader(),\r\n};\r\n\r\nexport default EXIFMarker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}